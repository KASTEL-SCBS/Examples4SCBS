\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon May 04 16:26:49 CEST 2020
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Labels]UseOriginLabels=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]MaximumNumberOfAutomaticApplications=500
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[SMTSettings]explicitTypeHierarchy=false
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Mon May 04 16:26:49 CEST 2020
name=edu.kit.informatik.pcc.service.authentication.intAuth.IntPasswordAuthentication[edu.kit.informatik.pcc.service.authentication.intAuth.IntPasswordAuthentication\\:\\:authenticatePassword(int,java.lang.String)].JML normal_behavior operation contract.0
contract=edu.kit.informatik.pcc.service.authentication.intAuth.IntPasswordAuthentication[edu.kit.informatik.pcc.service.authentication.intAuth.IntPasswordAuthentication\\:\\:authenticatePassword(int,java.lang.String)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "weigl" ) (keyVersion "d4628c6908"))
(keyLog "1" (keyUser "jonas" ) (keyVersion "1fcdc525bf"))

(autoModeTime "1777")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "userId,inputHash,self,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "9"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "13") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "13") (term "0,0,1,0,1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "9"))
 (builtin "One Step Simplification" (formula "4"))
(rule "sortsDisjointModuloNull" (formula "10"))
(rule "replace_known_right" (formula "10") (term "1") (ifseqformula "11"))
 (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")))
(rule "false_right" (formula "10"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,0,0,0,0,0,1"))
(rule "assignment" (formula "12") (term "1"))
 (builtin "One Step Simplification" (formula "12"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,0,0,0,0,0,1"))
(rule "Class_invariant_axiom_for_edu_kit_informatik_pcc_service_authentication_intAuth_IntPasswordAuthentication" (formula "7") (ifseqformula "3"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "nonNull" (formula "7") (inst "i=i"))
(rule "sub_literals" (formula "7") (term "2,1,0,1,1"))
 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "10")))
(rule "greater_literals" (formula "7") (term "0"))
 (builtin "One Step Simplification" (formula "7"))
(rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "10"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "7") (term "0"))
(rule "nnf_notAnd" (formula "7") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
(rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
(rule "mul_literals" (formula "7") (term "1,0,0,0"))
(rule "commute_or_2" (formula "7") (term "0"))
(rule "commute_or" (formula "7") (term "0,0"))
(rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_authenticatePassword,savedHeapBefore_authenticatePassword"))
 (builtin "One Step Simplification" (formula "12"))
(rule "variableDeclarationAssign" (formula "12") (term "1"))
(rule "variableDeclaration" (formula "12") (term "1") (newnames "pos"))
 (builtin "Use Operation Contract" (formula "12") (newnames "heapBefore_findUserPwdPair,result_22,exc_26") (contract "edu.kit.informatik.pcc.service.authentication.intAuth.IntPasswordAuthentication[edu.kit.informatik.pcc.service.authentication.intAuth.IntPasswordAuthentication::findUserPwdPair(int,java.lang.String)].JML normal_behavior operation contract.0"))
(branch "Post (findUserPwdPair)"
    (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "12"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "assignment" (formula "18") (term "1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "returnUnfold" (formula "18") (term "1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "18") (term "1"))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "x"))
   (rule "greater_equal_than_comparison_simple" (formula "18") (term "1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "methodCallReturn" (formula "18") (term "1"))
   (rule "assignment" (formula "18") (term "1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "methodCallEmpty" (formula "18") (term "1"))
   (rule "tryEmpty" (formula "18") (term "1"))
   (rule "emptyModality" (formula "18") (term "1"))
    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "13")))
   (rule "ifthenelse_split" (formula "18") (term "1") (userinteraction))
   (branch "result_22 â‰¥ 0 TRUE"
       (builtin "One Step Simplification" (formula "19"))
      (rule "instEx" (formula "13") (term "0,0") (ifseqformula "19") (userinteraction))
      (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "12")) (ifInst ""  (formula "13")))
      (rule "inEqSimp_leqRight" (formula "16"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "12"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "12") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1"))
      (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "8"))
      (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "8"))
      (rule "applyEq" (formula "21") (term "1,1,1,0,0") (ifseqformula "8"))
      (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0,1") (ifseqformula "8"))
      (rule "Query_axiom_for_equals_java_lang_String_java_lang_String__in_edu_kit_informatik_pcc_service_authentication_intAuth_IntPasswordAuthentication" (formula "14") (term "0") (inst "#res=x") (inst "#self=i") (inst "#p0=s") (inst "#p1=s_1") (inst "equals_sk=equals_sk_0") (ifseqformula "5"))
      (rule "eqSymm" (formula "14") (term "0,1"))
      (rule "applyEqRigid" (formula "14") (term "1,0,1") (ifseqformula "15"))
      (rule "inEqSimp_sepNegMonomial0" (formula "12"))
      (rule "polySimp_mulLiterals" (formula "12") (term "0"))
      (rule "polySimp_elimOne" (formula "12") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1"))
      (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1"))
      (rule "inEqSimp_contradEq7" (formula "16") (term "0") (ifseqformula "2"))
      (rule "add_zero_left" (formula "16") (term "0,0,0"))
      (rule "mul_literals" (formula "16") (term "0,0,0"))
      (rule "leq_literals" (formula "16") (term "0,0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "2"))
      (rule "leq_literals" (formula "11") (term "0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "1"))
      (rule "andLeft" (formula "11"))
      (rule "inEqSimp_homoInEq1" (formula "11"))
      (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
      (rule "add_literals" (formula "11") (term "1,1,0"))
      (rule "times_zero_1" (formula "11") (term "1,0"))
      (rule "add_zero_right" (formula "11") (term "0"))
      (rule "leq_literals" (formula "11"))
      (rule "closeFalse" (formula "11"))
   )
   (branch "result_22 â‰¥ 0 FALSE"
       (builtin "One Step Simplification" (formula "19"))
      (rule "nnf_notEx" (formula "19") (userinteraction))
      (rule "allRight" (formula "19") (inst "sk=i_0") (userinteraction))
      (rule "nnf_notAnd" (formula "19") (userinteraction))
      (rule "nnf_notAnd" (formula "19") (term "0") (userinteraction))
      (rule "nnf_notAnd" (formula "19") (term "1") (userinteraction))
      (rule "orRight" (formula "19") (userinteraction))
      (rule "orRight" (formula "19") (userinteraction))
      (rule "orRight" (formula "21") (userinteraction))
      (rule "notRight" (formula "20") (userinteraction))
      (rule "notRight" (formula "21"))
      (rule "notRight" (formula "22"))
      (rule "notRight" (formula "22"))
      (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "22"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "inEqSimp_geqRight" (formula "21"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "15"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "15") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
      (rule "inEqSimp_homoInEq0" (formula "5"))
      (rule "polySimp_addComm1" (formula "5") (term "0"))
      (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "11"))
      (rule "applyEq" (formula "15") (term "0,1,0") (ifseqformula "11"))
      (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0,1") (ifseqformula "11"))
       (builtin "Evaluate Query" (formula "3") (term "0") (newnames "a,b,callee,queryResult,res_equals"))
      (rule "replaceKnownQuery_edu_kit_informatik_pcc_service_authentication_intAuth_IntPasswordAuthentication_equals(heap,self,java_lang_String_select(heap,java_lang_String[]_select(heap,self,edu_kit_informatik_pcc_service_authentication_intAuth_IntPasswordAuthentication_hashes),arr(i_0)),inputHash)_10_0" (formula "4") (term "0"))
      (rule "notLeft" (formula "1"))
      (rule "eqSymm" (formula "18") (term "0,0,1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "queryResult"))
      (rule "applyEqRigid" (formula "18") (term "0,0,0,1") (ifseqformula "3"))
      (rule "eqSymm" (formula "18") (term "0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "5"))
      (rule "polySimp_mulComm0" (formula "5") (term "1"))
      (rule "polySimp_rightDist" (formula "5") (term "1"))
      (rule "mul_literals" (formula "5") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "15"))
      (rule "polySimp_mulLiterals" (formula "15") (term "0"))
      (rule "polySimp_elimOne" (formula "15") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1"))
      (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "1"))
      (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "applyEq" (formula "16") (term "1,1") (ifseqformula "14"))
      (rule "add_literals" (formula "16") (term "1"))
      (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
      (rule "qeq_literals" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "14"))
      (rule "leq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "nnf_imp2or" (formula "15") (term "0"))
      (rule "nnf_notAnd" (formula "15") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
      (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
      (rule "mul_literals" (formula "15") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "15") (term "1,0"))
      (rule "Class_invariant_axiom_for_edu_kit_informatik_pcc_service_authentication_intAuth_IntPasswordAuthentication" (formula "16") (ifseqformula "7"))
      (rule "andLeft" (formula "16"))
      (rule "notLeft" (formula "16"))
      (rule "nonNull" (formula "16") (inst "i=i"))
      (rule "greater_literals" (formula "16") (term "0,1"))
       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "20")))
      (rule "sub_literals" (formula "16") (term "2,1,0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "20"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
      (rule "nnf_imp2or" (formula "16") (term "0"))
      (rule "nnf_notAnd" (formula "16") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
      (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0"))
      (rule "shift_paren_or" (formula "15") (term "0"))
      (rule "commute_or_2" (formula "16") (term "0"))
      (rule "commute_or_2" (formula "15") (term "0"))
      (rule "commute_or" (formula "16") (term "0,0"))
      (rule "commute_or_2" (formula "15") (term "0,0"))
      (rule "commute_or" (formula "15") (term "0,0,0"))
       (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_equals,result_0,exc_0") (contract "edu.kit.informatik.pcc.service.authentication.intAuth.IntPasswordAuthentication[edu.kit.informatik.pcc.service.authentication.intAuth.IntPasswordAuthentication::equals(java.lang.String,java.lang.String)].JML normal_behavior operation contract.0"))
      (branch "Post (equals)"
          (builtin "One Step Simplification" (formula "17"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "17"))
         (rule "eqSymm" (formula "17"))
         (rule "assignment" (formula "19") (term "1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "Class_invariant_axiom_for_edu_kit_informatik_pcc_service_authentication_intAuth_IntPasswordAuthentication" (formula "18") (ifseqformula "7"))
         (rule "andLeft" (formula "18"))
         (rule "notLeft" (formula "18"))
         (rule "nonNull" (formula "18") (inst "i=i"))
         (rule "sub_literals" (formula "18") (term "2,1,0,1,1"))
          (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "22")))
         (rule "greater_literals" (formula "18") (term "0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "narrowSelectArrayType" (formula "18") (term "0,0,1,0") (ifseqformula "5") (ifseqformula "22"))
         (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0"))
         (rule "nnf_imp2or" (formula "18") (term "0"))
         (rule "nnf_notAnd" (formula "18") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
         (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
         (rule "mul_literals" (formula "18") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "18") (term "0"))
         (rule "commute_or" (formula "18") (term "0,0"))
         (rule "methodCallEmpty" (formula "18") (term "1"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "emptyModality" (formula "18") (term "1"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "notRight" (formula "18"))
         (rule "applyEq" (formula "18") (term "1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "arrayLengthIsAnInt" (formula "12") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "arrayLengthNotNegative" (formula "11") (term "1"))
         (rule "arrayLengthIsAnInt" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "arrayLengthNotNegative" (formula "11") (term "0"))
         (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
         (rule "allLeft" (formula "12") (inst "t=i_0"))
         (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "12") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "5"))
         (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
         (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "12") (term "0,0,1"))
         (rule "leq_literals" (formula "12") (term "0,1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "notLeft" (formula "12"))
         (rule "allLeft" (formula "16") (inst "t=i_0"))
         (rule "replaceKnownQuery_edu_kit_informatik_pcc_service_authentication_intAuth_IntPasswordAuthentication_equals(heap,self,java_lang_String_select(heap,java_lang_String[]_select(heap,self,edu_kit_informatik_pcc_service_authentication_intAuth_IntPasswordAuthentication_hashes),arr(i_0)),inputHash)_10_0" (formula "16") (term "0,0,0,0,0"))
         (rule "replace_known_left" (formula "16") (term "0,0,0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "4")))
         (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "16"))
         (rule "andLeft" (formula "5"))
         (rule "inEqSimp_homoInEq1" (formula "5"))
         (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
         (rule "add_literals" (formula "5") (term "1,1,0"))
         (rule "times_zero_1" (formula "5") (term "1,0"))
         (rule "add_zero_right" (formula "5") (term "0"))
         (rule "leq_literals" (formula "5"))
         (rule "closeFalse" (formula "5"))
      )
      (branch "Exceptional Post (equals)"
          (builtin "One Step Simplification" (formula "16"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "18"))
         (rule "notLeft" (formula "16"))
         (rule "close" (formula "19") (ifseqformula "18"))
      )
      (branch "Pre (equals)"
          (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "18")) (ifInst ""  (formula "5")) (ifInst ""  (formula "18")) (ifInst ""  (formula "8")))
         (rule "Class_invariant_axiom_for_edu_kit_informatik_pcc_service_authentication_intAuth_IntPasswordAuthentication" (formula "16") (term "0,0") (ifseqformula "7"))
         (rule "replace_known_right" (formula "16") (term "0,0,0,0") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "nonNull" (formula "16") (term "0,0") (inst "i=i"))
         (rule "sub_literals" (formula "16") (term "2,1,0,1,1,0,0"))
          (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "19")))
         (rule "greater_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "narrowSelectArrayType" (formula "16") (term "0,0,1,0,0,0") (ifseqformula "5") (ifseqformula "19"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,0,0"))
         (rule "nnf_imp2or" (formula "16") (term "0,0,0"))
         (rule "nnf_notAnd" (formula "16") (term "0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,0"))
         (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,0"))
         (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,0"))
         (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
         (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
         (rule "arrayLengthNotNegative" (formula "10") (term "0"))
         (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
         (rule "arrayLengthIsAnInt" (formula "11") (term "1,1,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "arrayLengthNotNegative" (formula "10") (term "1"))
         (rule "arrayLengthIsAnInt" (formula "10") (term "0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "allLeft" (formula "11") (inst "t=i_0"))
         (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
         (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "11") (term "0,0,1"))
         (rule "leq_literals" (formula "11") (term "0,1"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "1"))
         (rule "qeq_literals" (formula "11") (term "0,1"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "notLeft" (formula "11"))
         (rule "replace_known_right" (formula "17") (term "0,1,0") (ifseqformula "16"))
          (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")))
         (rule "allLeft" (formula "15") (inst "t=i_0"))
         (rule "replaceKnownQuery_edu_kit_informatik_pcc_service_authentication_intAuth_IntPasswordAuthentication_equals(heap,self,java_lang_String_select(heap,java_lang_String[]_select(heap,self,edu_kit_informatik_pcc_service_authentication_intAuth_IntPasswordAuthentication_hashes),arr(i_0)),inputHash)_10_0" (formula "15") (term "0,0,0,0,0"))
         (rule "replace_known_left" (formula "15") (term "0,0,0,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "3")))
         (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "1"))
         (rule "qeq_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "4"))
         (rule "andLeft" (formula "15"))
         (rule "inEqSimp_homoInEq1" (formula "15"))
         (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
         (rule "add_literals" (formula "15") (term "1,1,0"))
         (rule "times_zero_1" (formula "15") (term "1,0"))
         (rule "add_zero_right" (formula "15") (term "0"))
         (rule "leq_literals" (formula "15"))
         (rule "closeFalse" (formula "15"))
      )
      (branch "Null reference (callee = null)"
          (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "17")))
         (rule "closeTrue" (formula "16"))
      )
   )
)
(branch "Exceptional Post (findUserPwdPair)"
    (builtin "One Step Simplification" (formula "13"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "8"))
   (rule "close" (formula "12") (ifseqformula "11"))
)
(branch "Pre (findUserPwdPair)"
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")) (ifInst ""  (formula "10")) (ifInst ""  (formula "6")) (ifInst ""  (formula "9")) (ifInst ""  (formula "1")) (ifInst ""  (formula "9")) (ifInst ""  (formula "4")))
   (rule "sortsDisjointModuloNull" (formula "12") (term "0,0"))
   (rule "replace_known_right" (formula "12") (term "0,0,0") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "10")))
   (rule "Class_invariant_axiom_for_edu_kit_informatik_pcc_service_authentication_intAuth_IntPasswordAuthentication" (formula "12") (ifseqformula "3"))
   (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "nonNull" (formula "12") (inst "i=i"))
   (rule "greater_literals" (formula "12") (term "0,1"))
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "10")))
   (rule "sub_literals" (formula "12") (term "2,1,0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "allRight" (formula "12") (inst "sk=i_0"))
   (rule "impRight" (formula "12"))
   (rule "andLeft" (formula "1"))
   (rule "notRight" (formula "14"))
   (rule "narrowSelectArrayType" (formula "1") (term "0") (ifseqformula "4") (ifseqformula "13"))
   (rule "inEqSimp_ltToLeq" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "arrayLengthNotNegative" (formula "9") (term "0"))
   (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
   (rule "arrayLengthNotNegative" (formula "10") (term "1"))
   (rule "arrayLengthIsAnInt" (formula "10") (term "1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "allLeft" (formula "11") (inst "t=i_0"))
   (rule "replace_known_left" (formula "11") (term "0,0,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
   (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "2"))
   (rule "qeq_literals" (formula "11") (term "0,0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "3"))
   (rule "andLeft" (formula "11"))
   (rule "inEqSimp_homoInEq1" (formula "11"))
   (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
   (rule "add_literals" (formula "11") (term "1,1,0"))
   (rule "times_zero_1" (formula "11") (term "1,0"))
   (rule "add_zero_right" (formula "11") (term "0"))
   (rule "leq_literals" (formula "11"))
   (rule "closeFalse" (formula "11"))
)
)
}
